/*
 * Produced: Wed Jan 19 2022
 * Author: Alec M.
 * GitHub: https://amattu.com/links/github
 * Copyright: (C) 2022 Alec M.
 * License: License GNU Affero General Public License v3.0
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Imports
import express from 'express';
import ejs from 'ejs';
import ratelimit from 'express-rate-limit';
import faker from 'faker';
import nodemailer from 'nodemailer';
import path from 'path';

// Instantiate router component
const router = express.Router();

// Generate a fake vehicle
const generateVehicle = () => {
  let vehicle = {
    Sold: Math.random() < 0.2,
    StockNum: Math.floor(Math.random() * 250) + 1,
    ModelYear: Math.floor(Math.random() * (2022 - 2017) + 2016),
    Make: "", /* Generated by Model */
    Model: faker.vehicle.vehicle(),
    Trim: "TRIM",
    Drivetrain: "AWD",
    Link: "",
    Price: parseInt(faker.commerce.price(15000, 45000, 0, "")),
    MSRP: parseInt(faker.commerce.price(16000, 50000, 0, "")),
    VIN: faker.vehicle.vin(),
    IntColor: [faker.vehicle.color(), "#3b3b3b"],
    ExtColor: [faker.vehicle.color(), "#454545"],
    Owners: Math.floor(Math.random() * 3) + 1,
    EPA: {
      "City": 26,
      "Highway": 32
    },
    Odometer: Math.floor(Math.random() * 100000),
    Images: [],
  };
  vehicle.Link = process.env.APPLICATION_URL + "/vehicles/" + `${vehicle.StockNum}-${vehicle.ModelYear}-${vehicle.Model.trim()}`.toLowerCase().replace(/\s/g, "-");

  return vehicle;
};

// Use RateLimit Module
router.use(new ratelimit({
  windowMs: 15 * 1000,
  max: 5
}));

/**
 * Root directory
 *
 * @author Alec M.
 */
router.get('/', async (request, response) => {
  // Send default response
  response.status(404).send("");
});

/**
 * Submit a interest form in a vehicle
 *
 * @author Alec M.
 * @date 2022-01-19
 */
router.post('/interest', async (request, response) => {
  // Check if the vehicle exists
  if (!request.body.StockNum) {
    response.status(404).send("Invalid stock number");
    return;
  }

  // Check if the email is valid
  if (!request.body.email) {
    response.status(400).send("Invalid email provided");
    return;
  }

  // Check if name is valid
  if (!request.body.name) {
    response.status(400).send("Invalid name provided");
    return;
  }

  // Generate fake response vehicles
  const vehicle = generateVehicle();
  const template = await ejs.renderFile(path.resolve() + "/views/email.ejs", {
    env: process.env,
    vehicle: vehicle,
    request: request.body,
  });
  const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: process.env.EMAIL_PORT,
    auth: {
      user: process.env.EMAIL_USERNAME,
      pass: process.env.EMAIL_PASSWORD
    }
  });
  const status = await transporter.sendMail({
    from: process.env.EMAIL_USERNAME,
    to: request.body.email,
    bcc: process.env.COMPANY_EMAIL,
    subject: `Vehicle Interest - ${vehicle.ModelYear} ${vehicle.Make} ${vehicle.Model}`,
    html: template,
    text: "Your email provider does not support HTML content."
  }, null);

  // Default
  response.status(200).send("Success");
});

/**
 * Text search query for vehicles
 *
 * @author Alec M.
 * @date 2021-11-20 16:18:00
 */
 router.get('/search/:query', async (request, response) => {
  // Generate fake response vehicles
  let vehicles = [];
  for (let i = 0; i < 5; i++) {
    vehicles.push(generateVehicle());
  }

  // Render respons
  response.render('partials/searchCardContainer', {
    env: process.env,
    vehicles
  });
});

// Export Router
export default router;
