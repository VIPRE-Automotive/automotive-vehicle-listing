/*
 * Produced: Wed Jan 19 2022
 * Author: Alec M.
 * GitHub: https://amattu.com/links/github
 * Copyright: (C) 2022 Alec M.
 * License: License GNU Affero General Public License v3.0
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Imports
import express from 'express';
import faker from 'faker';

// Instantiate router component
const router = express.Router();

// Generate a fake vehicle
const generateVehicle = () => {
  let vehicle = {
    Sold: Math.random() < 0.2,
    StockNum: Math.floor(Math.random() * 250) + 1,
    ModelYear: Math.floor(Math.random() * (2022 - 2017) + 2016),
    Make: "", /* Generated by Model */
    Model: faker.vehicle.vehicle(),
    Trim: "TRIM",
    Drivetrain: "AWD",
    Link: "",
    Price: parseInt(faker.commerce.price(15000, 45000, 0, "")),
    MSRP: parseInt(faker.commerce.price(16000, 50000, 0, "")),
    VIN: "2C4RDGCG8KR648272",
    IntColor: [faker.vehicle.color()],
    ExtColor: [faker.vehicle.color()],
    Owners: Math.floor(Math.random() * 3) + 1,
    EPA: {
      "City": 26,
      "Highway": 32
    },
    Odometer: Math.floor(Math.random() * 100000),
    Images: [],
    ShowCARFAX: 1,
  };
  vehicle.Link = process.env.APPLICATION_URL + "/vehicles/" + `${vehicle.StockNum}-${vehicle.ModelYear}-${vehicle.Model.trim()}`.toLowerCase().replace(/\s/g, "-");

  return vehicle;
};

/**
 * Root directory
 *
 * @author Alec M.
 */
router.get('/', async (request, response) => {
  // Generate fake response vehicles
  let vehicles = [];
  for (let i = 0; i <= 19; i++) {
    vehicles.push(generateVehicle());
  }

  // Send default response
  response.render('index', {
    env: process.env,
    context: {
      query: "All Vehicles"
    },
    vehicles
  });
});

router.get('/vehicles/:vehicle', async (request, response) => {
  // Generate recommendations
  let vehicles = [];
  for (let i = 0; i < 3; i++) {
    vehicles.push(generateVehicle());
  }

  // Send default response
  response.render('listing', {
    env: process.env,
    context: {
      query: "",
      queryLink: "/",
    },
    vehicle: generateVehicle(),
    recommendations: vehicles,
  });
});

// Export Router
export default router;
